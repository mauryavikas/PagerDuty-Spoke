<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_1143793_pd.PagerDuty_Utils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>PagerDuty_Utils</name>
        <script><![CDATA[var PagerDuty_Utils = Class.create();

PagerDuty_Utils.checkMandatoryFields = function (mandatoryFieldsList) {
	var emptyMandatoryFieldsList = [];
	Object.keys(mandatoryFieldsList).forEach(function (key) {
		if (mandatoryFieldsList[key] && (typeof mandatoryFieldsList[key] === 'object' || Array.isArray(mandatoryFieldsList[key]))) {
			throw "Value cannot be object or array for " + key;
		} else if (mandatoryFieldsList[key] === null || mandatoryFieldsList[key].trim() === '') {
			emptyMandatoryFieldsList.push(key);
		}
	});
	return emptyMandatoryFieldsList;
};

PagerDuty_Utils.trimInputs = function (inputs) {
	for (var keys in inputs) {
		if (typeof inputs[keys] == 'string') {
			inputs[keys] = inputs[keys].trim();
		} else if (typeof inputs[keys] === "object" && inputs[keys] !== null) {
			this.trimInputs(inputs[keys]);
		}
	}
	return inputs;
};

// Removes empty strings from an array of strings by trimming each element.
PagerDuty_Utils.removeEmptyArrayString = function (arrayString) {
	var trimmedArray = [];
	arrayString.forEach(function (value) {
		if (value && value.trim().length !== 0) {
			trimmedArray.push(value.trim());
		}
	});
	return trimmedArray;
};

PagerDuty_Utils.throwAndLogErr = function (errorMsg,erro) {
	gs.info("Error: ".concat(errorMsg).concat(e));
	throw new Error(errorMsg);
};


PagerDuty_Utils.get4xx5xxErrMsg = function (statusCode) {
	var errorMsg = "";
	var code = statusCode.toString();
	switch (code) {
		case "400":
			errorMsg = "Bad Request: Please verify the request URI and headers.";
			break;
		case "401":
			errorMsg = "Invalid credentials.";
			break;
		case "403":
			errorMsg = "User is not authorized to access this resource.";
			break;
		case "404":
			errorMsg = "Resource not found.";
			break;
		case "503":
			errorMsg = "Service unavailable.";
			break;
		default:
			errorMsg = "Encountered an error. Check log for more details.";
	}
	return errorMsg;
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-04-10 11:33:00</sys_created_on>
        <sys_id>1b49b02497e942106bdef141f053af3c</sys_id>
        <sys_mod_count>3</sys_mod_count>
        <sys_name>PagerDuty_Utils</sys_name>
        <sys_package display_value="PagerDuty Spoke" source="x_1143793_pd">ad9e002c97e542106bdef141f053af88</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="PagerDuty Spoke">ad9e002c97e542106bdef141f053af88</sys_scope>
        <sys_update_name>sys_script_include_1b49b02497e942106bdef141f053af3c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-04-12 10:46:13</sys_updated_on>
    </sys_script_include>
</record_update>
